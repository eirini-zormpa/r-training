---
title: "Introduction to R"
author: "Eirini Zormpa"
institute: "The RSA"
title-slide-attributes:
    data-background-image: https://images.unsplash.com/photo-1664448021787-7893ce42f81a?w=600&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwcm9maWxlLXBhZ2V8ODR8fHxlbnwwfHx8fHw%3D
    data-background-opacity: "0.5"
format:
  revealjs:
    theme: [moon, custom.scss]
    slide-number: true
from: markdown+emoji
---

# Software installation

If you weren't able to install software, let one of the IT team members know

## Introductions :wave:

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

```{r}
#| echo: false

library(here)
library(readr)
library(countdown)
```


**Eirini Zormpa**, Quantitative Researcher

- Secondary data from the ONS :money_with_wings: :house: :leaves:

<br>

. . .

### Previously:

- **Research infrastructure** @ TU Delft & The Alan Turing Institute
  - Participation data in courses and other events :mortar_board:
- **PhD Student** @ Max Planck Institute for Psycholinguistics 
  - Primary data from human participants :speech_balloon: :eyes: :brain:

# What will **you** use R for?

Tell us in the chat!

## Why R?

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

R is both a programming language and the software used to interpret it.
It is **free** and **open source**. :x: :moneybag: = :tada:

. . .

- :recycle: **reproducibility**: because R is a programming language (not point-and-click), you don't have to remember what you pressed when to repeat something. It's all written down for you in a script!

. . .

- :floppy_disk: **working with data**: R was created by statisticians for statistics and data work is where it shines

. . .

- :oyster: **working in any discipline**: because R is open source, anyone can contribute code to extend its functionality (currently 10,000+ packages).

. . .

- :heartpulse: **supportive community**

## R in the wild

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

:::: {.columns}

::: {.column width="60%"}


![](https://mir-s3-cdn-cf.behance.net/project_modules/fs/44a415100683383.631e30537753e.png)

:::

::: {.column width="40%"}


![](https://raw.githubusercontent.com/gkaramanis/tidytuesday/master/2019/2019-week-23/ramen.png)
:::

::::

::: aside
Image credits: [Cedrik Scherer](https://www.cedricscherer.com/) and [George Karamanis](https://github.com/gkaramanis) (Tidy Tuesday submissions)
:::

## Why this workshop series

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

- Teaches you all the basics for getting started with working with data

. . .

- Is based on open educational materials that have been refined over many iterations - credit to The Carpentries :blue_heart:

. . .

- Uses a live-coding format, which is excellent for beginners

. . .

- We're here to help :raised_hands:

## Getting help

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

There are helpers in person and online. If your code doesn't work, they're here to help you :muscle::

- If you're attending in person, raise your hand and wait until someone comes over.
- If you're attending online, **paste the code you run and the error message in the chat**. Don't just say that something didn't work for you, as we won't have enough information to help you.

## Learning objectives

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

- Navigate the RStudio Graphical User Interface (GUI).
- Perform simple arithmetic calculations in R.
- Understand basic programming terms, like `objects` and `functions`.


## R Projects: File paths :recycle:

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

Below you see two ways of reading data into R.
They both work and they both access the same file.

Which one looks more reproducible?:


```{r}
#| echo: true
#| eval: false

# option 1: absolute path
census_data <- read_csv("/Users/Eirini.zormpa/Documents/rsa-r-training/data_raw/synthetic-census-data.csv")

# option 2: relative path
census_data <- read_csv("data_raw/synthetic-census-data.csv")
```

. . .

Option 2 is more reproducible, as it allows you to move your project around on your computer and share it with others without having to directly modify file paths in the individual scripts.

## R Projects: Folder structure :recycle:

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

It is good practice to keep all files related to a project in a single folder, called the `working directory`.
This includes data, scripts, outputs, and documentation.  

This makes sharing and documenting your projects much easier.

```{mermaid}
flowchart TB
  A[working-directory] --> B["data_raw/"]
  A[working-directory] --> C["data_processed/"]
  A[working-directory] --> D["figures/"]
  A[working-directory] --> E([LICENCE.md])
  A[working-directory] --> F([paper.qmd])
  A[working-directory] --> G([README.md])
  A[working-directory] --> H["scripts/"]

```

## Create an R Project

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

1. Under the **`File`** menu, click on **`New project`**
2. In the wizard that pops up click on **`New directory`** > **`New project`**
3. You will now create the working directory for the rest of the workshop and save it in a convenient location.
4. Give a good name to your new directory (folder), e.g. **`r-workshop`**. Make sure your name doesn't have spaces or special characters!
5. Click on **`Browse`** and navigate to a suitable location for this repository and click on **`Open`** when you are in a location you are happy with.
3. Click on **`Create project`**.

## Exercise 1.1

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

:alarm_clock: **5 mins**

```{r}
countdown(minutes = 5)
```

Create two variables `income` and `expenses` and assign them values.
Create a third variable `profit` and give it a value based on the current values of `income` and `expenses`
Show that changing the values of either `income` or `expenses` does not affect the value of `profit`


## Exercise 1.1 solution

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

```{r}
#| echo: true
#| eval: true

income <- 100
expenses <- 90
profit <- income - expenses
profit

# change the values of `income` and `expenses`
income <- 80
expenses <- 100

# the value of `profit` hasn't changed
profit

```

## Functions and their arguments

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

- **Functions** are like "canned" scripts that do a specific task.

. . .

- They usually take some kind of input (called an **argument**) and often give back some kind of output. 

. . .

- Running or executing a function is often termed **calling** a function. 

. . .

- The arguments of functions can be anything: e.g. numbers, filenames, but also other objects.

## Vectors and data structures

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

- A *vector* is the simplest R data structure. 

. . .

- It is composed by a series of values **of the same type**, e.g.*character* and *numeric* (or *double*). 

. . .

- Other vector types are: *logical* for `TRUE` and `FALSE`, *integer* for integer numbers and two others we won't discuss (*complex* and *raw*).


## Exercise 1.2

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

:alarm_clock: **10 mins**

```{r}
countdown(minutes = 10)
```

What will happen in each of these examples?

```{r}
#| echo: true

num_char <- c(1, 2, 3, "a")
num_logical <- c(1, 2, 3, TRUE)
char_logical <- c("a", "b", "c", TRUE)
tricky <- c(1, 2, 3, "4")
```

**Hint**: use `typeof()` to check the data type of your objects

## Exercise 1.2 solution

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

```{r}
#| echo: true

typeof(num_char)
typeof(num_logical)
typeof(char_logical)
typeof(tricky)
```

Vectors can be of only **one data type**. R tries to convert (coerce) the content of this vector to find a "common denominator" that doesnâ€™t lose any information.

## Exercise 1.3

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

:alarm_clock: **10 mins**

```{r}
countdown(minutes = 10)
```


```{r}
#| echo: true
bedrooms <- c(1, 2, 1, 1, NA, 3, 1, 3, 2, 1, 1, 8, 3, 1, NA, 1)
```

1. Using the above vector, create a new vector with the `NA`s removed.
2. Use the function `median()` to calculate the median of the `bedrooms` vector.
3. How many households have more than two bedrooms?

## Exercise 1.3 solution

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

```{r}
#| echo: true

# 1. 
bedrooms_no_na <- bedrooms[!is.na(bedrooms)]
# or
bedrooms_no_na <- na.omit(bedrooms)

# 2.
median(bedrooms, na.rm = TRUE)

# 3.
bedrooms_above_2 <- bedrooms_no_na[bedrooms_no_na > 2]
length(bedrooms_above_2)
```


## Summary

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

So far you have learned how to:

- :white_check_mark: Navigate the RStudio Graphical User Interface (GUI).
- :white_check_mark: Create files and R projects.
- :white_check_mark: Perform simple arithmetic calculations in R.
- :white_check_mark: Create `objects` and `vectors`.
- :white_check_mark: Use functions.
- :white_check_mark: Work with missing data.

## Programming note

::: {data-id="box1" style="background: #03ecdd; width: 100px; height: 75px; margin: 10px; position: absolute; top: -100px; left: -10px"}

:::

When we say R is a language, we mean just that: We need to learn **a new way of communicating** that lets us talk to the R software. 

. . .

Software isn't as smart as humans and have no tolerance for errors: if we don't tell it what we do just the way it wants, it won't work. 

. . .

Learning how to speak the software's language takes time and practice, but we're here to help you :muscle::sparkles:

# Thank you for your attention :sparkles:
